[[plugins]] # コード補完
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#sources#go#package_dot = 1
  set completeopt-=preview " プレビューウィンドウを開かないようにする
  "set completeopt+=noinsert " 最初の候補がデフォで選択されるようにする
  " TAB や Shift-TAB で補完補完候補を上下する
  if ! dein#tap('neosnippet.vim')
    " neosnippet使う場合はそっちも考慮した設定をしてるのでスキップ
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  endif
  inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
  inoremap <expr><UP>   pumvisible() ? "\<C-p>" : "<UP>"
  inoremap <expr><DOWN> pumvisible() ? "\<C-n>" : "<DOWN>"
  " python3が無かったらメッセージを表示
  if has('nvim') && !has('python3')
    echo "require python3 https://gist.github.com/kawaz/393c7f62fe6e857cc3d9 or execute 'pip3 install neovim --upgrade' and :call dein#update()"
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_ft = ['neosnippet']
on_i = 1
hook_add_ = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_complete_done = 1
  let g:neosnippet#expand_word_boundary = 1
  " スニペットディレクトリを設定（同じスニペットが見つかった場合は最初の先に見つかったほうが優先される)
  let g:neosnippet#snippets_directory = []
  if exists('$DOTFILES_DIR')
  let g:neosnippet#snippets_directory += [$DOTFILES_DIR . '/etc/vim/neosnippets']
  endif
  if ! empty(dein#get('neosnippet-snippets'))
  let g:neosnippet#snippets_directory += [dein#get('neosnippet-snippets').path . '/neosnippets']
  endif
  " Plugin key-mappings. スニペット補完候補がある場合は C-k でスニペットを展開する（Enterではない）
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  " SuperTab like snippets behavior. スニペットのプレースホルダ上にいる時はTabで次のプレースホルダにジャンプする
  imap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '\<C-n>' : '\<TAB>'
  smap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : '\<TAB>'
  " For snippet_complete marker.
  if has('conceal')
  set conceallevel=2 concealcursor=i
  endif
'''

# for Unite
[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_path = '.*'
on_i = 1

# languages
## toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']


##  markdown
[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = ['markdown']

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown']
depends = ['tabular', 'vim-markdown-quote-syntax']
hook_add = '''
  let g:vim_markdown_new_list_item_indent = 2
'''

[[plugins]]
# 外部コマンドに依存しないMarkdownプレビュー、open-browser.vimとリアルタイムプレビューできて素敵
repo = 'kannokanno/previm'
hook_add = '''
  let g:previm_open_cmd = 'open -a Google\ Chrome '
'''


##  html5
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'erb']


## perl
[[plugins]]
repo = 'petdance/vim-perl'
on_ft = ['perl']

[[plugins]]
repo = 'hotchpotch/perldoc-vim'
on_ft = ['perl']


## go
[[plugins]]
# golang completion
repo = 'zchee/deoplete-go'
on_ft = ['go']
build = 'make'
hook_add = '''
  let g:deoplete#sources#go#align_class = 1
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  " MEMO: gocode set autobuild してfalseだったら
  " gocode set autobuild true するとvendorディレクトリ内も保管できるようになる
  " またはgo buildしてあるパッケージは補完出来るのでそれがよければautobuildは不用
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_post_source = '''
  " MEMO: gocode set autobuild true を実行しておくとvendor内のライブラリ補完もできるようになる
  let g:go_fmt_command = 'goimports'
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_term_enabled = 1
  if dein#tap('syntastic')
    let g:syntastic_go_checkers = ['golint', 'gotype', 'govet', 'go']
  endif
  " TODO: キーマップはまだ確認してないので後でやる
  " 関連ツールの雑なチェック
  if executable('go')
    for s:command in ['goimports', 'godef', 'golint', 'gocode', 'gotags', 'gorename']
      if !executable(s:command)
        echo s:command . ' is not found. Please run :GoInstallBinaries or :GoUpdateBinaries'
        break
      endif
    endfor
  endif
'''

